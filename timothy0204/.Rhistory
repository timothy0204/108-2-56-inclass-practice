hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
f(w) -> x
f(w) %>%
g(.) %>%
h(.) -> z
w %>%
f(.) %>%
g(.) %>%
h(.) -> z
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
region <- cities
# 以下為一連串的pipe operation
library(stringr)
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
region <- cities
# 以下為一連串的pipe operation
library(stringr)
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
num[.]
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths <- c(Gary=178, John=182, Cam=175)
threeHeigths <- c(Gary=178, John=182, Cam=175)
threeHeigths <- c(Gary=178, John=182, Cam=175)
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace("台北","北部") %>%
str_replace("花蓮|台東","東部") %>%
str_replace("台中","中部") ->
levels(region)
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 分析步驟
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
population %>% names(sort(.))
population %>%
names(sort(.)) %>%
factor(cities, levels=.) -> cities
population %>%
names(sort(.)) %>%
factor(cities, levels=.) -> cities
population %>%
{names(sort(.))} %>%
factor(cities, levels=.) -> cities
population %>%
{names(sort(.))} %>%
factor(cities, levels=.) -> cities
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
View(demand)
3
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
demand_return(1.2) # 相當於
4
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
dateInput <- today()
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
dateInput <- today()
askSilly_weather("臺中市"),today())
askSilly_weather("臺中市")#,today()
askSilly_weather("臺中市")#,today()
dateInput <- today()
library(lubridate)
dateInput <-lubridate::today()
locationInput <- "新北市"
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市")#,today()
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
if(condition){
Body for TRUE
# 先執行此行輸入學號
studentId <- readline(prompt = "請輸入你的學號")
# 先執行此行輸入學號
studentId <- readline(prompt = "請輸入你的學號")
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
install.packages("SOAR")
# 測試
check_package("clipr")
# 測試
install.packages("clipr")
check_package("clipr")
askSilly_weather <- function(locationInput, dateInput) {
weather_next36hours <- jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON")
pick_location <- (weather_next36hours$cwbopendata$dataset$location$locationName ==
locationInput)
weatherAtLocation <- weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]]
pick_MaxT <- (weatherAtLocation$elementName == "MaxT")
pick_MinT <- (weatherAtLocation$elementName == "MinT")
maxT <- weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]]
minT <- weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]]
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
# 檢視步驟耗時elapse time
system.time(weather_next36hours <- jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON"))
if (!exists("weather_next36hours")) {
weather_next36hours <- jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON")
SOAR::Store(weather_next36hours)  # 存在.R_cache environment中
}
system.time(askSilly_weather("新北市", today()))
askSilly_weather2 <- function(locationInput, dateInput) {
if (!exists("weather_next36hours")) {
weather_next36hours <- jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON")
SOAR::Store(weather_next36hours)  # 存在.R_cache environment中
}
pick_location <- (weather_next36hours$cwbopendata$dataset$location$locationName ==
locationInput)
weatherAtLocation <- weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]]
pick_MaxT <- (weatherAtLocation$elementName == "MaxT")
pick_MinT <- (weatherAtLocation$elementName == "MinT")
maxT <- weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]]
minT <- weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]]
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
SOAR::Remove(weather_next36hours)
system.time(askSilly_weather2("新北市", today()))
if(condition){
body for TRUE condition
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n + 1)/2
(n%%2) == 1  # 表示「奇數」; 或...
as.logical(n%%2)  # 只有0會變F，其他數值都是T
n <- 54
if (as.logical(n%%2)) {
fvalue <- -(n + 1)/2
} else {
fvalue <- n/2
}
myFun <- function(n) {
if (as.logical(n%%2)) {
fvalue <- -(n + 1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
i <- 1
student_i_section <- examSubmissionTime$section[[i]]
examSubmissionTime <- jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1")
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i <- 1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")  #
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz = "Asia/Taipei")
print(howEarly)
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
student_i_section == "56"
i <- 1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if (student_i_section == "56") {
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz = "Asia/Taipei")
print(howEarly)
compute_howEarly <- function(student_i_section, student_i_time) {
# student_i_section <- examSubmissionTime$section[[i]] student_i_time <-
# examSubmissionTime$time[[i]]
if (student_i_section == "56") {
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz = "Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz = "Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz = "Asia/Taipei")
# print(howEarly)
return(howEarly)
}
studentSequence <- 1:length(examSubmissionTime$section)
list_howEarly <- map(studentSequence, ~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
compute_howEarly(examSubmissionTime$section[[1]], examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]], examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]], examSubmissionTime$time[[3]])
studentSequence <- 1:length(examSubmissionTime$section)
list_howEarly <- map(studentSequence, ~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
library(magrittr)
examSubmissionTime$howEarly <- list_howEarly %>% unlist()
studentSequence <- 1:length(examSubmissionTime$section)
list_howEarly <- map(studentSequence, ~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
studentSequence <- 1:length(examSubmissionTime$section)
library(purrr)
list_howEarly <- map(studentSequence, ~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
library(magrittr)
examSubmissionTime$howEarly <- list_howEarly %>% unlist()
pick_56 <- examSubmissionTime$section == "56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])
pick_78 <- examSubmissionTime$section == "78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
if(condition A){
if(condition A){
grade  # 單獨執行
if (grade >= 90) {
print("優")
} else if (grade >= 80 & grade <= 89) {
print("良")
} else if (grade >= 70 & grade <= 79) {
print("尚可")
} else {
print("待加強")
}
grade <- 80
if (grade >= 90) {
print("優")
} else if (grade >= 75 & grade <= 89) {
print("良")
} else if (grade >= 70 & grade <= 85) {
print("尚可")
} else {
print("待加強")
}
grade <- 80
if (grade >= 90) {
print("優")
} else if (grade >= 70 & grade <= 85) {
print("尚可")
} else if (grade >= 75 & grade <= 89) {
print("良")
} else {
print("待加強")
}
grade  # 單獨執行
<- readline("請輸入你的成績（整數）： ")
readline("請輸入你的成績（整數）： ") ->
grade
grade  # 單獨執行
<- readline("請輸入你的成績（整數）： ") ->
77
grade  # 單獨執行
<- readline("請輸入你的成績（整數）： ") ->
if (grade >= 90) {
print("優")
} else if (grade >= 80 & grade <= 89) {
print("良")
} else if (grade >= 70 & grade <= 79) {
print("尚可")
} else {
print("待加強")
}
